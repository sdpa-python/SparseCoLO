function [QMat,cVect,K,L] = QSDPfixLambda(sizePara,lambda,ubdVect,lbdVect);
% 小島先生，
% 
% 何度もすみませんが，補足です．
% 
% >問題：
% >	\sum_{i} (A_i y_i + C_i y_i^{2}) 
% >		- \lambda \sum_{i} ( B_{i} y_ {i} +B_0) \succeq O 
% >において，
% >
% >・・・・・・・
% 
% と書きましたが，目的関数は
% 
% 	dll' * y	の最小化
% 
% です．半正定値制約以外の制約条件として，y_i の非負制約を考えています．
% まとめると，
% 
% 	min.	\sum_{i} dll_i y_i
% 	s.t.	\sum_{i} (A_i y_i + C_i y_i^{2}) 
% 		- \lambda ( \sum_{i}  B_i y_ i +B_0) \succeq O 
% 		y_i \ge 0	(forall i)
% 
% です．（この前のblock対角化での実験のように）yの上界を適当に与えた問題で
% も，工学的には意味があると思います．
% 
% --
% 寒野 善博
% 東京大学大学院 情報理工学系研究科 数理情報学専攻
% <kanno[at]mist.i.u-tokyo.ac.jp>

    
fileName = strcat('grid_DC',num2str(sizePara),'.mat'); 

S = load(fileName,'-mat','dll','AMat','BMat','CMat','BMat0'); 

nm = size(S.AMat,2);
L.s = size(S.AMat{1},1);
K.s = 1+nm; % variables are y_1,... 

bdConst = 1; 
if nargin == 0
    sizePara = 2; 
    lambda = 10000;
    ubdVect = bdConst*ones(nm,1);
    lbdVect = zeros(nm,1); 
elseif nargin == 1
    lambda = 10000;
    ubdVect = bdConst*ones(nm,1);
    lbdVect = zeros(nm,1); 
elseif nargin == 2
    ubdVect = bdConst*ones(nm,1);
    lbdVect = zeros(nm,1); 
elseif nargin == 3
    lbdVect = zeros(nm,1); 
end

updateSW = 0;
if updateSW == 1
    if sizePara == 6
        absSolution = abs(...
            [+9.9995506e-01  +3.6553432e-05  +5.4690283e-06  +7.2806097e-06  +2.1640455e-05 ...
            +5.0601895e-05  +4.0085027e-01  +2.9543084e-06  +3.3858677e-06  +3.3508462e-05  ...
            +8.6236062e-03  +9.9994932e-01  +2.9596473e-01  +1.0079941e-04  +7.0009504e-05 ...
            +1.5808160e-05  +5.6905235e-06  +6.8299467e-01  +4.9988288e-02  +2.6488927e-03 ...
            +2.4144667e-01  +2.3709901e-06  +4.4697393e-01  +3.8761382e-01  +5.0607393e-05 ...
            +5.1317931e-01  +1.1294334e-06  +1.7521693e-06  +3.8587072e-01  +2.0376115e-02 ...
            +7.0833988e-06  +1.7818385e-06  +2.2048150e-06  +4.9320111e-01  +2.8061522e-01 ...
            +3.4096056e-02  +1.6788388e-06  +2.0362234e-05  +2.2518946e-04  +8.5010256e-01 ...
            +1.0000008e+00  +1.0000019e+00  +1.0000017e+00  +2.3795879e-06  +1.7374070e-05 ...
            +6.3961311e-06  +2.3225363e-05  +3.0287400e-06  +1.0000020e+00  +9.9999485e-01 ...
            +9.9999678e-01  +4.8958858e-01  +4.9441650e-06  +8.4253880e-03  +9.9995324e-01 ...
            +1.0000019e+00  +5.0261963e-02  +9.9998006e-01  +8.6168204e-01  +2.5809590e-02 ...
            +4.5985063e-04  +1.0000009e+00  +1.0000018e+00  +1.2340213e-04  +7.3518299e-01 ...
            +8.2184036e-01  +3.6650161e-06  +6.0468561e-06  +1.0000006e+00  +1.0000016e+00 ...
            +1.9206623e-05  +1.1982886e-04  +2.2774615e-06  +1.5609676e-06  +2.4209536e-04 ...
            +9.9994866e-01  +1.0000015e+00  +2.5963676e-06  +1.5834616e-06  +1.5525515e-06 ...
            +1.0086868e-01  +3.3698737e-01  +7.9061658e-01  +1.0000011e+00  +1.0000018e+00 ...
            +7.3392359e-01  +2.0806922e-05  +1.5969776e-06  +6.5773232e-06  +2.7202320e-05 ...
            +9.9999862e-01  +1.0000003e+00  +3.6619736e-01  +4.0790296e-05  +1.6048289e-05 ...
            -2.2291221e-07  +9.4239455e-01  +9.9997878e-01  +9.9992555e-01  +3.3141352e-01 ...
            +3.7793556e-06  -7.1431393e-07  +6.5406634e-02  +9.9984237e-01  +9.9999425e-01 ...
            +7.6878723e-01  +6.0393458e-06  -8.1819215e-07  +9.8909916e-05  +8.7869794e-01 ...
            +9.9999333e-01  +9.8551803e-01  +3.9917441e-01  -8.6026934e-07  +1.4258235e-05 ...
            +1.5683072e-04  +7.4098171e-01  +6.4600959e-01  +9.9999812e-01  +3.8377386e-01 ...
            +7.2986174e-01  +1.8821082e-05  +5.0261166e-06  +1.1050185e-05  +2.8641397e-05 ...
            +1.0000018e+00  +5.9728450e-01  +3.3737568e-01  +2.7525821e-05  +1.1864092e-02 ...
            +1.0000004e+00  +1.0000004e+00  +3.2360248e-05  +2.5624450e-01  +2.3845299e-02 ...
            +9.9999951e-01  +3.8677194e-01  +9.0549851e-01  +4.3344230e-05  +1.6606642e-01 ...
            +9.9979630e-01  +4.8706494e-02  +8.5377072e-01  +4.8338097e-01  +8.8812416e-06 ...
            +9.2288941e-05  +2.2818520e-02  +4.8863099e-01  +8.7508912e-01  +2.9739583e-06 ...
            +1.4657708e-06  +1.4815759e-05  +1.5734640e-04  +5.9370915e-01  +1.6115118e-01 ...
            -1.8231811e-07]);
        activeIdx = find(absSolution > 1.0e-5);
        barEig_0 = 421.5206; 
    elseif sizePara == 4
        absSolution = abs(...
            [+8.3963724e-06  +1.7643732e-07  +6.4078767e-08  +7.8882803e-08  +4.9440140e-01 ...
            -4.0050202e-07  -2.8744363e-07  +2.8616440e-01  +2.1295982e-07  +2.5269321e-01 ...
            -4.4164209e-07  +2.5482255e-01  +1.0463646e-06  -4.6121303e-07  -2.3090604e-07 ...
            +2.8466997e-01  +1.4479829e-07  +2.7195179e-06  +2.1551128e-01  +9.9999987e-01 ...
            +4.9771873e-01  -4.0454766e-07  +1.8454158e-07  +1.8548707e-07  +1.0000005e+00 ...
            +2.7965551e-06  +4.9877414e-01  +2.9961495e-06  +2.8784127e-01  +1.0000005e+00 ...
            +1.4116133e-06  +2.4924088e-01  -4.6243335e-07  +5.3455308e-01  +1.0000004e+00 ...
            +1.1089490e-07  -3.6238300e-07  -3.3569609e-07  +4.0446909e-01  +8.8057678e-01 ...
            +1.0000005e+00  +6.1151062e-06  -1.6230547e-08  -1.1018350e-07  +6.8436611e-01 ...
            +1.0000004e+00  +4.2393857e-06  -4.6498101e-07  +1.1505338e-06  +9.9999395e-01 ...
            +8.7772394e-01  -3.8714167e-07  +1.6599417e-06  +1.6352167e-01  +9.1693200e-01 ...
            +5.2360879e-01  +5.7000138e-06  +1.2210936e-07  +7.1293387e-08  +7.9087632e-01 ...
            +8.8351015e-07  +2.1900297e-06  +3.7593520e-01  +3.9254289e-01  +1.0727398e-07 ...
            +1.7976342e-01  +1.5492545e-02  +3.3336545e-01  +1.6090323e-07  +2.0173380e-06 ...
            +1.6198937e-01  +3.4942991e-01]);
        activeIdx = find(absSolution > 1.0e-5);
        barEig_0 = 531.0264; 
    elseif sizePara == 2
        absSolution = abs(... 
            [+6.0531065e-10  +6.0519418e-10  +1.9270519e-09  +2.7045431e-03  +9.0872367e-10 ...  
            +3.8254913e-09  +2.9866085e-09  +5.2773993e-10  +8.1808890e-01  +1.0512166e-09 ...
            +9.2571628e-10  +8.0074980e-01  +8.7057571e-01  +6.6227329e-10  +2.2383265e-09 ...  
            +8.5233007e-01  +6.7884848e-10  +6.6612195e-03  +9.4129283e-10  +1.7032918e-09]);
        activeIdx = find(absSolution > 1.0e-5);
        barEig_0 = 827.2998; 
    else         
        activeIdx = [1:nm]
    end
    nm = length(activeIdx); 
    K.s = 1+nm; % variables are y_1,... 
else
	activeIdx = [1:nm];     
end
    
% scaling ---> 
% lambda = 1.0e4 mu, lambda = 15,000 ---> mu = 1.5; 
% y_i = 1.0e-2 z_i, y_i = 0.1 ---> z_i = 10; 
for i=1:nm
    S.AMat{i} = 1.0e-2*S.AMat{i};
end
for i=1:nm
     S.BMat{i} = 1.0e-2*S.BMat{i};
end
for i=1:nm
    S.CMat{i} = 1.0e-4*S.CMat{i};
end
% S.BMat0 = 1.0e4*S.BMat0;
% <---

%%%%%%%
% mu = 1; % lambda = 15,000
%%%%%%%

debugSW = 0;
if debugSW == 1
    for i=1:nm
        fprintf('norm(S.AMat{%2d},inf) = %7.2e\n',i,norm(S.AMat{i},inf));
    end
    for i=1:nm
        fprintf('norm(S.BMat{%2d},inf) = %7.2e\n',i,norm(S.BMat{i},inf));
    end
    for i=1:nm
        fprintf('norm(S.CMat{%2d},inf) = %7.2e\n',i,norm(S.CMat{i},inf));
    end
    fprintf('norm(S.BMat%d,inf) = %7.2e\n',0,norm(S.BMat0,inf));
end

% 
objMat = sparse(K.s,K.s); 
objMat(2:K.s,1) = S.dll(activeIdx,:)/2;
objMat(1,2:K.s) = S.dll(activeIdx,:)'/2;
% objMat(1,K.s) = -1;
% objMat(K.s,1) = -1;
% full(objMat); 
cVect = reshape(objMat,K.s*K.s,1); 
clear objMat

QMatLP = [];
% Nonnegativity condition 
L.l = 0; 
for i = 1:nm
    oneCoefMat = sparse(K.s,K.s);
    oneCoefMat(1,1+i) = 0.5;
    oneCoefMat(1+i,1) = 0.5;
%      if i == nm+1
%          oneCoefMat(1,1) = -0.72; 
%      end
    QMatLP = [QMatLP; reshape(oneCoefMat,1,K.s*K.s)]; 
end
L.l = L.l + nm; 

% Upper bound for y_i; aVect(i) - y_i \geq 0
for i = 1:nm
    oneCoefMat = sparse(K.s,K.s);
    oneCoefMat(1,1+i) = -0.5;
    oneCoefMat(1+i,1) = -0.5;
    oneCoefMat(1,1) = ubdVect(activeIdx(i)); 
    QMatLP = [QMatLP; reshape(oneCoefMat,1,K.s*K.s)]; 
end
L.l = L.l + nm; 

% Upper bound for Y_{ii};  ubdVect{i} y_i - Y_{ii} \geq 0
for i = 1:nm
    oneCoefMat = sparse(K.s,K.s);
    oneCoefMat(1,1+i) = ubdVect(activeIdx(i))/2; 
    oneCoefMat(1+i,1) = ubdVect(activeIdx(i))/2;     
    oneCoefMat(1+i,1+i) = -1;
    QMatLP = [QMatLP; reshape(oneCoefMat,1,K.s*K.s)]; 
end
L.l = L.l + nm; 

QMat = [];
for p=1:L.s
    for q=1:L.s
        if p <= q
            oneCoefMat = sparse(K.s,K.s);
            for i=1:nm
                oneCoefMat(1,1+i) = S.AMat{activeIdx(i)}(p,q) - lambda * S.BMat{activeIdx(i)}(p,q);
                oneCoefMat(1+i,1) = oneCoefMat(1,1+i);
                oneCoefMat(1+i,1+i) = S.CMat{activeIdx(i)}(p,q);
            end
            oneCoefMat(1,1) = - lambda * S.BMat0(p,q);
            QMat = [QMat; reshape(oneCoefMat,1,K.s*K.s)]; 
        else
            r = (q-1)*L.s + p; 
            QMat = [QMat; QMat(r,:)]; 
        end
    end
end

if updateSW == 1
    L0.s = L.s; 
    spPatMat = sparse(L0.s,L0.s);
    QMat0 = QMat;
    for i=1:L0.s
        for j=i:L0.s
            rowIdx = (i-1)*L0.s+j;
            if nnz(QMat(rowIdx,:)) > 0
                spPatMat(i,j) = 1;
                spPatMat(j,i) = 1;
            end
        end
    end
    nzRowIdx = find(sum(spPatMat,1));
    L.s = length(nzRowIdx);
    QMat = [];
    for p=nzRowIdx
        for q=nzRowIdx
            rowIdx = (p-1)*L0.s + q;
            QMat = [QMat;QMat0(rowIdx,:)];
        end
    end
end

    

debugSW = 0;
if debugSW == 1
    K.s
    L.s
    for i=1:L.s*L.s
        i
        full(reshape(QMat(i,:),K.s,K.s))        
    end
    full(reshape(cVect,K.s,K.s))
end

debugSW = 1; 
if debugSW == 1
    fprintf('## Checking whether QMat is symmetric\n');
    errorSym = 0.0; 
    for i=1:L.s-1
        for j=i+1:L.s
            p = (i-1)*L.s+j; 
            q = (j-1)*L.s+i; 
            a = norm(QMat(p,:) - QMat(q,:),inf); 
            errorSym = errorSym + a; 
            if a > 1.0e-8
                fprintf('norm(QMat(%d,:) - QMat(%d,:),inf) > 1.0e-8\n',p,q);
            end
        end
    end
    fprintf('   Total error = %7.2e\n',errorSym);
    fprintf('## Checking whether each QMat(i,:) is symmetric\n');
    for i=1:L.s
        for j=i:L.s
            p = (i-1)*L.s+j; 
            tempMat = reshape(QMat(p,:),K.s,K.s);
            a = norm(tempMat - tempMat',inf); 
            errorSym = errorSym + a; 
            if a > 1.0e-8
                fprintf('norm(QMat(%d,:) - QMat(%d,:)^T,inf) > 1.0e-8\n',p,p);
            end
        end
    end
    fprintf('   Total error = %7.2e\n',errorSym);    
end            

QMat = [QMatLP;QMat];

return

